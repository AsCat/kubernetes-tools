#!/bin/bash

# Kubernetes Tools - Copyright (C) 2017 Shawn Wang
# https://github.com/shawnxlw/kubernetes-tools
#
# You may use, distribute or modify this software under the terms of the MIT license.


function auto_completion() {
	echo "Adding bash completion"
	path=$1/completion/__completion

	if [[ $SHELL == *"zsh"* ]]; then
		echo -e "\nZSH detected. The following lines will be added to $HOME/.zshrc"
		echo -e " autoload -U compaudit compinit bashcompinit\n compaudit && compinit && bashcompinit\n source $path\n"
		read -p "Press [Enter] to continue..."

		echo -e "\n#Kubernetes Tools zsh completion start\nautoload -U compaudit compinit bashcompinit\ncompaudit && compinit && bashcompinit\nsource $path\n#Kubernetes Tools zsh completion end\n" >> $HOME/.zshrc
		echo -e "\n.zshrc updated. Start a new shell to enjoy tab completion!"
	elif [[ $SHELL == *"bash"* ]]; then
		echo -e "\nBASH detected. The following lines will be added to $HOME/.bashrc"
		echo -e " source $path\n"
		read -p "Press [Enter] to continue..."

		echo -e "\n#Kubernetes Tools zsh completion start\nsource $path\n#Kubernetes Tools zsh completion end\n" >> $HOME/.bashrc
		echo -e "\n.bashrc updated. Start a new shell to enjoy tab completion!"
	else
		echo "Only BASH and ZSH supported at this stage. Sorry."
	fi
}

function init() {
	path=$(greadlink -f "$0")
	app_root=$(dirname $(dirname ${path:-"$0"}))

	# set up tab completion
	auto_completion $app_root
}

# sohw help
show_help() {
  echo "Kubernetes Tools v1.2.0"
  echo "List all tools: ktools"
  echo "Setup auto completion: ktools init"
  echo
  echo "===Operation==="
  echo "kns: Specify default namespace"
  echo "kctx: List and switch contexts"
  echo "kpod: List pods in specified namespace"
  echo "kds: Descirbe pod in specified namespace"
  echo
  echo "===Debug==="
  echo "kcp: Copy common cli tools to selected container"
  echo "kexec: Get a shell of a selected container"
  echo
  echo "===Maintenance==="
  echo "kbak: Backup and restore namespace/cluster"
  echo
  echo "For usage of each tool, run [tool_name] -h"
}

show_help
# parse arguments
while [ "$1" != "" ]; do
  case $1 in
    -i | --init ) shift
      init
      ;;
    -h | --help ) shift
      exit 0
      ;;
    * ) exit 0
  esac
  shift
done
